---
name: cs102-F2020-practical6
break: true
indent: 4
---

# Learn more about GatorGrader and its supported checks by visiting this web site:
# https://github.com/GatorEducator/gatorgrader

# Explanation:
# --> a check without an "--exact" runs a count for an entity as an "at least"
# --> checks below a file in a specified directory are for that specific file and directory
# --> checks that appear stand-alone are for an entire Git repository

# --> check the Python program
collatzcreator/collatzcreator/__main__.py:
    ConfirmFileExists
    MatchFileFragment --fragment "TODO" --count 0 --exact
    MatchFileFragment --fragment "Option([])" --count 1 --exact
    MatchFileFragment --fragment "Option(1)" --count 1 --exact
    MatchFileFragment --fragment "Option(10)" --count 1 --exact
    MatchFileFragment --fragment "run(main)" --count 1 --exact
    CountMultipleLineComments --language Python --count 2
    CountSingleLineComments --language Python --count 4

# --> check the Python program
collatzcreator/collatzcreator/collatz.py:
    ConfirmFileExists
    MatchFileFragment --fragment "TODO" --count 0 --exact
    MatchFileFragment --fragment "number // 2" --count 1
    CountMultipleLineComments --language Python --count 2
    CountSingleLineComments --language Python --count 7

# --> check the Python program
collatzcreator/tests/test_collatz.py:
    ConfirmFileExists
    MatchFileFragment --fragment "TODO" --count 0 --exact
    CountMultipleLineComments --language Python --count 1

# --> check the technical writing for various characteristics
writing/reflection.md:
    ConfirmFileExists
    CountFileWords --count 600
    CountMarkdownTags --tag "heading" --count 10 --exact
    CountMarkdownTags --tag "code" --count 2
    CountMarkdownTags --tag "code_block" --count 3 --exact
    MatchFileFragment --fragment "TODO" --count 0 --exact
    MatchFileFragment --fragment "Add Your Name Here" --count 0 --exact

# --> check that the number of commits in the Git repository is beyond a threshold
CountCommits --count 5

# --> check that the program executes correctly and produces correct number of lines of output
ExecuteCommand --command "cd collatzcreator; poetry install; poetry run python collatzcreator; cd .."

# Output of the Python Program:

# Let's investigate the behavior of the Collatz sequence! üîç

# Does this sequence of numbers finish at the value of 1? ‚ú®

# The inputs to the Collatz function:

#   [1, 2, 3, 4, 5, 6, 7, 8, 9]

# The length of the resulting Collatz chain:

#   [1, 2, 8, 3, 6, 9, 17, 4, 20]

# The minimum length of a Collatz chain is: 1
# The maximum length of a Collatz chain is: 20

# The mean of the length of a Collatz chain is: 7.777777777777778
# The median of the length of a Collatz chain is: 6
# The standard deviation of the length of a Collatz chain is: 6.285393610547089

# Can you find a pattern between the input number and the length of the Collatz chain? ü§∑

# Check the file called 'collatz.pdf' to see a graph that visualizes the results! üìà
